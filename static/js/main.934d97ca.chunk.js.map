{"version":3,"sources":["actions/tasks.js","containers/TodoApp.js","components/TodoApp.js","reducers/tasks.js","index.js","store/index.js","components/Error.js"],"names":["connect","tasks","task","dispatch","addTask","type","payload","inputTask","deleteTask","id","clearTask","redirectToError","push","value","onChange","e","target","onSubmit","onClick","map","item","key","href","initialState","uniqueId","tasksReducer","state","action","concat","filter","v","history","createBrowserHistory","store","reduxCreateStore","combineReducers","persistReducer","storage","storageSession","whitelist","router","routerReducer","applyMiddleware","routerMiddleware","persistor","persistStore","render","loading","exact","path","component","TodoApp","to","document","getElementById"],"mappings":"qPAAO,ICgCQA,eA3BS,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACzB,MAAO,CACLC,KAAMD,EAAMC,KACZD,MAAOA,EAAMA,UAIW,SAACE,GAC3B,MAAO,CACLC,QADK,SACGF,GACNC,EDRiB,SAACD,GAAD,MAAW,CAChCG,KAAM,WACNC,QAAS,CACPJ,SCKWE,CAAQF,KAEnBK,UAJK,SAIKL,GACRC,EDlBmB,SAACD,GAAD,MAAW,CAClCG,KAAM,aACNC,QAAS,CACPJ,SCeWK,CAAUL,KAErBM,WAPK,SAOMC,GACTN,EDPoB,SAACM,GAAD,MAAS,CACjCJ,KAAM,cACNC,QAAS,CACPG,OCIWD,CAAWC,KAEtBC,UAVK,WAWHP,EDH0B,CAC9BE,KAAM,gBCIJM,gBAbK,WAcHR,EAASS,YAAK,eAKLZ,EC9BA,YAA+F,IAA5EE,EAA2E,EAA3EA,KAAMD,EAAqE,EAArEA,MAAOM,EAA8D,EAA9DA,UAAWH,EAAmD,EAAnDA,QAASI,EAA0C,EAA1CA,WAAYE,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,gBACxF,OACE,6BACE,2BAAON,KAAK,OAAOQ,MAAOX,EAAMY,SAAU,SAACC,GAAD,OAAOR,EAAUQ,EAAEC,OAAOH,QAAQI,SAAU,kBAAMb,EAAQF,MACpG,2BAAOG,KAAK,SAASQ,MAAM,MAAMK,QAAS,kBAAMd,EAAQF,MACxD,4BAEID,EAAMkB,KAAI,SAACC,GACT,OACE,wBAAIC,IAAKD,EAAKX,IACXW,EAAKlB,KADR,OAGE,uBAAGoB,KAAK,IAAIJ,QAAS,kBAAMV,EAAWY,EAAKX,MAA3C,eAMV,4BAAQS,QAAS,kBAAMR,MAAvB,cACA,4BAAQQ,QAAS,kBAAMP,MAAvB,kB,mCCrBAY,EAAe,CACnBC,SAAU,EACVtB,KAAM,GACND,MAAO,IAGM,SAASwB,IAA0C,IAA7BC,EAA4B,uDAAtBH,EAAcI,EAAQ,uCAC/D,OAAQA,EAAOtB,MACb,IAAK,aACH,OAAO,eACFqB,EADL,CAEExB,KAAMyB,EAAOrB,QAAQJ,OAEzB,IAAK,WACH,MAAmB,KAAfwB,EAAMxB,KACD,eACFwB,EADL,CAEExB,KAAM,GACND,MAAOyB,EAAMzB,MAAM2B,OAAO,CAAC,CAAC1B,KAAMyB,EAAOrB,QAAQJ,KAAMO,GAAIiB,EAAMF,YACjEA,SAAUE,EAAMF,SAAW,IAGxBE,EACT,IAAK,cACH,OAAO,eACFA,EADL,CAEEzB,MAAOyB,EAAMzB,MAAM4B,QAAO,SAACC,GAAD,OAAOA,EAAErB,KAAOkB,EAAOrB,QAAQG,QAE7D,IAAK,aACH,OAAO,eACFiB,EADL,CAEEzB,MAAO,KAEX,QACE,OAAOyB,GCrBb,ICHoCK,EDG9BA,EAAUC,MAGVC,GCN8BF,EDMVA,ECLjBG,YACLC,YAAgB,CACdlC,MAAOmC,YAAe,CAACf,IAAK,OAAQgB,QAASC,IAAgBC,UAAW,CAAC,WAAY,UAAWd,GAChGe,OAAQC,MAEVC,YACEC,YAAiBZ,MDAjBa,EAAYC,YAAaZ,GAG/Ba,iBACE,kBAAC,IAAD,CAAUb,MAAOA,GACf,kBAAC,IAAD,CAAac,QAAS,KAAMH,UAAWA,GACtC,kBAAC,IAAD,CAAiBb,QAASA,GACxB,6BACE,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UEvBf,WACb,OACE,6BACE,0CACA,kBAAC,IAAD,CAAME,GAAG,KAAT,gBFwBJC,SAASC,eAAe,W","file":"static/js/main.934d97ca.chunk.js","sourcesContent":["export const inputTask = (task) => ({\n  type: 'INPUT_TASK',\n  payload: {\n    task\n  }\n});\n\nexport const addTask = (task) => ({\n  type: 'ADD_TASK',\n  payload: {\n    task\n  }\n});\n\nexport const deleteTask = (id) => ({\n  type: 'DELETE_TASK',\n  payload: {\n    id\n  }\n});\n\nexport const clearTask = () => ({\n  type: 'CLEAR_TASK',\n});\n","import { connect } from 'react-redux';\nimport { push } from 'react-router-redux';\nimport TodoApp from '../components/TodoApp';\nimport { inputTask, addTask, deleteTask, clearTask } from '../actions/tasks';\n\nconst mapStateToProps = ({ tasks }) => {\n  return {\n    task: tasks.task,\n    tasks: tasks.tasks\n  };\n}\n\nconst  mapDispatchToProps = (dispatch) => {\n  return {\n    addTask(task) {\n      dispatch(addTask(task));\n    },\n    inputTask(task) {\n      dispatch(inputTask(task));\n    },\n    deleteTask(id) {\n      dispatch(deleteTask(id));\n    },\n    clearTask() {\n      dispatch(clearTask());\n    },\n    redirectToError() {\n      dispatch(push('/error'));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp);\n","import React from 'react';\n\nexport default function TodoApp({ task, tasks, inputTask, addTask, deleteTask, clearTask, redirectToError }) {\n  return (\n    <div>\n      <input type='text' value={task} onChange={(e) => inputTask(e.target.value)} onSubmit={() => addTask(task)} />\n      <input type='button' value='add' onClick={() => addTask(task)} />\n      <ul>\n        {\n          tasks.map((item) => {\n            return (\n              <li key={item.id}>\n                {item.task}\n                &nbsp;\n                <a href=\"#\" onClick={() => deleteTask(item.id)}>âœ—</a>\n              </li>\n            );\n          })\n        }\n      </ul>\n      <button onClick={() => clearTask()} >Clear Task</button>\n      <button onClick={() => redirectToError()} >Error Page</button>\n    </div>\n  );\n}\n","const initialState = {\n  uniqueId: 1,\n  task: '',\n  tasks: []\n};\n\nexport default function tasksReducer(state=initialState, action) {\n  switch (action.type) {\n    case 'INPUT_TASK':\n      return {\n        ...state,\n        task: action.payload.task\n      };\n    case 'ADD_TASK':\n      if (state.task !== '') {\n        return {\n          ...state,\n          task: '',\n          tasks: state.tasks.concat([{task: action.payload.task, id: state.uniqueId}]),\n          uniqueId: state.uniqueId + 1\n        };\n      }\n      return state;\n    case 'DELETE_TASK':\n      return {\n        ...state,\n        tasks: state.tasks.filter((v) => v.id !== action.payload.id)\n      };\n    case 'CLEAR_TASK':\n      return {\n        ...state,\n        tasks: []\n      };\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { render } from 'react-dom';\nimport { Route } from 'react-router-dom';\nimport { ConnectedRouter } from 'react-router-redux';\nimport { persistStore } from 'redux-persist';\nimport { PersistGate } from 'redux-persist/es/integration/react';\nimport createBrowserHistory from 'history/createBrowserHistory';\nimport TodoApp from './containers/TodoApp';\nimport Error from './components/Error';\nimport createStore from './store';\n\n// History\nconst history = createBrowserHistory();\n\n// Store\nconst store = createStore(history);\nconst persistor = persistStore(store);\n\n// React\nrender(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n     <ConnectedRouter history={history}>\n       <div>\n         <Route exact path='/' component={TodoApp} />\n         <Route path='/error' component={Error} />\n       </div>\n     </ConnectedRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n","import {\n  createStore as reduxCreateStore,\n  combineReducers,\n  applyMiddleware\n} from 'redux';\nimport { routerReducer, routerMiddleware } from 'react-router-redux';\nimport { persistReducer } from 'redux-persist';\nimport storageSession from 'redux-persist/lib/storage/session';\nimport tasksReducer from '../reducers/tasks';\n\nexport default function createStore(history) {\n  return reduxCreateStore(\n    combineReducers({\n      tasks: persistReducer({key: 'task', storage: storageSession, whitelist: ['uniqueId', 'tasks']}, tasksReducer),\n      router: routerReducer\n    }),\n    applyMiddleware(\n      routerMiddleware(history)\n    )\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function Error() {\n  return (\n    <div>\n      <h1>Error Page</h1>\n      <Link to=\"/\">Back</Link>\n    </div>\n  );\n}\n"],"sourceRoot":""}